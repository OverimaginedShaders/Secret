diff --git a/Based on Reimagined r1.2.1.txt b/Based on Reimagined r1.2.1.txt
new file mode 100644
index 0000000..c80684d
--- /dev/null
+++ b/Based on Reimagined r1.2.1.txt
@@ -0,0 +1 @@
+This version of Overimagined Shaders is based on Complementary Reimagined r1.2.1 by EminGT
diff --git a/DISCLAIMER.txt b/DISCLAIMER.txt
new file mode 100644
index 0000000..0e291ab
--- /dev/null
+++ b/DISCLAIMER.txt
@@ -0,0 +1,29 @@
+
+ /$$$$$$$  /$$$$$$  /$$$$$$   /$$$$$$  /$$        /$$$$$$  /$$$$$$ /$$      /$$ /$$$$$$$$ /$$$$$$$ 
+| $$__  $$|_  $$_/ /$$__  $$ /$$__  $$| $$       /$$__  $$|_  $$_/| $$$    /$$$| $$_____/| $$__  $$
+| $$  \ $$  | $$  | $$  \__/| $$  \__/| $$      | $$  \ $$  | $$  | $$$$  /$$$$| $$      | $$  \ $$
+| $$  | $$  | $$  |  $$$$$$ | $$      | $$      | $$$$$$$$  | $$  | $$ $$/$$ $$| $$$$$   | $$$$$$$/
+| $$  | $$  | $$   \____  $$| $$      | $$      | $$__  $$  | $$  | $$  $$$| $$| $$__/   | $$__  $$
+| $$  | $$  | $$   /$$  \ $$| $$    $$| $$      | $$  | $$  | $$  | $$\  $ | $$| $$      | $$  \ $$
+| $$$$$$$/ /$$$$$$|  $$$$$$/|  $$$$$$/| $$$$$$$$| $$  | $$ /$$$$$$| $$ \/  | $$| $$$$$$$$| $$  | $$
+|_______/ |______/ \______/  \______/ |________/|__/  |__/|______/|__/     |__/|________/|__/  |__/
+
+
+- Overimagined Shaders, developed by isuewo and SpacEagle17, is a work-in-progress edit of Complementary Reimagined by EminGT.
+- Any issues encountered using this edit should not be reported to EminGT.
+
+
+This project wouldn't have been possible without these awesome people:
+- EminGT - The developer of Complementary Reimagined, a very patient individual who we made suffer with our code and someone who helped us when frustration kicked in
+- SixthSurge - Always assisted us when we needed some help
+- dragoncat - Overimagined logo and helpful suggestions
+- TheNukeLore - IntegratedPBR Normals Resolution and Strength
+
+Other honorable mentions:
+- sp614x
+- coderbot
+- IMS
+- Tigerblood
+- Renko
+- Septonious
+- Lily :ioa:
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..8f05e89
--- /dev/null
+++ b/README.md
@@ -0,0 +1,42 @@
+#### Hey everyone, thank you for your great interest in Overimagined, but Emin has expressed his concerns about the future of Reimagined and our edit, so we have put our development on indefinite hold until we can find a solution to the underlying problem that both parties are comfortable with
+
+
+
+<img src="https://user-images.githubusercontent.com/46494907/182962685-cb624c8b-782a-4d51-b9e5-090267ae6624.png" alt="Overimagined_logo" width="100" height="auto" />
+  <h1>Overimagined Shaders</h1>
+  A Complementary Reimagined edit 
+  
+## :link: Links
+* **[Download](https://download-link-here.com) the latest release here!**
+* Join the [Complementary Discord](https://discord.gg/A6faFYt) to get support and interact with the community! You can find us in the "overimagined" thread under #shader-general.
+* [YouTube Trailer](https://www.youtube.com/watch?v=tJBoYaol3f4) of Overimagined Shader
+
+## What is Overimagined Shaders?
+
+Overimagined Shaders, by SpacEagle17 and isuewo, is an edit of EminGT's Complementary Reimagined Shaders. The goal of this edit is to provide more customization options for Complementary Reimagined, while keeping the look and performance as similar to the original as possible. With default settings, Overimagined functions the same as Reimagined; the additional features can be enabled in the shader menu, either individually or together via the Overimagined profile. Overimagined will get updated alongside Complementary Reimagined, so that you won't miss out on any new features.
+
+## :camera: Screenshots
+<img src="https://user-images.githubusercontent.com/46494907/182963116-0998fbc9-cd68-4912-9e41-31c3a1de7d3d.png" width="500" height="auto" />
+<img src="https://user-images.githubusercontent.com/46494907/182963134-d613b400-69df-4e8b-94c1-908a49b8b9c5.png" width="500" height="auto" />
+<img src="https://user-images.githubusercontent.com/46494907/182963710-179de3c1-7ef4-4eb6-a495-c7051bbdb38f.png" width="500" height="auto" />
+<img src="https://user-images.githubusercontent.com/46494907/182964341-dc1dc1ae-cc6d-46bb-a274-54384d6668fc.png" width="500" height="auto" />
+
+## :scroll: Features
+* Aurora Color Settings (Custom, Varying, Color Profiles and Rainbow)
+* Aurora Density, Draw Distance and Intensity Settings
+* Configurable Clouds (Speed, Width, Height, Transparency)
+* Configurable Sun Angle
+* Emissive Amethyst Block
+* Emissive Ores Multiplier
+* Emissive Redstone, Emerald and Lapis Block
+* Emissive Wart Blocks
+* Individual Emissive Ores
+* Night Brightness Option
+* Non-blocky Aurora
+* Overworld Beams
+* Random Blocklight Color
+* Realistic Water Wave Intensity
+* Scene Aware Light Shafts Toggle
+* Star Brightness Option
+* Underwater Distortion Intensity
+* Waving Speed of Foliage and Leaves Option
diff --git a/shaders/block.properties b/shaders/block.properties
index f9d3a7d..3ce023f 100644
--- a/shaders/block.properties
+++ b/shaders/block.properties
@@ -55,8 +55,10 @@
 block.10132=grass_block:snowy=false
 block.10136=farmland:moisture=7
 block.10140=netherrack
-block.10144=warped_nylium warped_wart_block
-block.10148=crimson_nylium nether_wart_block
+block.10144=warped_nylium
+block.10146=warped_wart_block
+block.10148=crimson_nylium 
+block.10150=nether_wart_block
 block.10152=cobblestone cobblestone_slab mossy_cobblestone cobblestone_stairs infested_cobblestone cobblestone_wall mossy_cobblestone_wall mossy_cobblestone_stairs mossy_cobblestone_slab moss_block moss_carpet furnace:lit=false smoker:lit=false blast_furnace:lit=false lodestone piston sticky_piston piston_head dispenser dropper
 block.10156=oak_planks stripped_oak_log stripped_oak_wood oak_slab petrified_oak_slab oak_fence oak_stairs oak_button oak_pressure_plate oak_door oak_trapdoor oak_fence_gate bookshelf crafting_table tripwire_hook
 block.10160=oak_log oak_wood
diff --git a/shaders/lang/en_US.lang b/shaders/lang/en_US.lang
index fafee46..70cbff6 100644
--- a/shaders/lang/en_US.lang
+++ b/shaders/lang/en_US.lang
@@ -6,7 +6,7 @@
 profile.HIGH=§bHigh (Default)
 profile.VERYHIGH=§9Very High
 profile.ULTRA=§dUltra
-profile.comment=Shader profiles change performance settings with the most optimised visual fidelity to performance ratio. It's recommended to use one of these profiles for your performance settings unless you know what you are doing.
+profile.comment=Shader profiles change performance settings with the most optimised visual fidelity to performance ratio. It's recommended to use one of these profiles for your performance settings unless you know what you are doing. The Overimagined Profile enables all Overimagined features.
 
 #CMPR
 option.CMPR=Complementary
@@ -14,9 +14,9 @@
 value.CMPR.1=§eReimagined
 value.CMPR.2=§aReimagined
 value.CMPR.3=§bReimagined
-value.CMPR.4=§9Reimagined
-value.CMPR.5=§dReimagined
-option.CMPR.comment=Complementary Reimagined is a creation of love and care, meant to complement the unique Minecraft experience in the best way possible. I hope you enjoy your time with Reimagined as much as I enjoyed developing it. Please feel free to join the Complementary community here: www.complementary.dev/discord
+value.CMPR.5=§9Reimagined
+value.CMPR.6=§dReimagined
+option.CMPR.comment=Overimagined Shaders is a creation of love, care and frustration, meant to complement the unique Minecraft experience in the best way possible while having more customizable options than Complementary Reimagined. Please feel free to join the Complementary community here: www.complementary.dev/discord
 
 #Screens
 screen.PERFORMANCE_SETTINGS=Performance Settings
@@ -264,4 +264,137 @@
 option.WORLD_OUTLINE=Outlined World
 option.WORLD_OUTLINE.comment=Adds outlines around blocks.
 value.WORLD_OUTLINE.true=§bON
-value.WORLD_OUTLINE.false=§aOFF
\ No newline at end of file
+value.WORLD_OUTLINE.false=§aOFF
+
+#Overimagined
+profile.OVERIMAGINED=§dOVER§bIMAGINED
+
+value.CMPR.4=§dO§aver§ei§bma§cg§3ine§6d
+
+screen.OVERIMAGINED_SETTINGS=Overimagined Settings
+screen.OVERIMAGINED_SETTINGS.comment=Settings that are added by Overimagined.
+    screen.SKY=Sky
+    screen.SKY.comment=Settings that relate to the sky.
+        screen.CLOUDS=Clouds
+	    screen.AURORA_SETTINGS=Aurora Borealis
+	    screen.AURORA_SETTINGS.comment=Settings that relate to the Aurora Borealis.
+		    screen.AURORA_COLOR_SETTINGS=Aurora Color Settings
+		    screen.AURORA_COLOR_SETTINGS.comment=Settings that relate to the color of the Aurora Borealis.
+    screen.WORLD=World
+    screen.WATER=Water
+    screen.WATER.comment=Settings that relate to water.
+    screen.WORLD.comment=Settings that relate to the world.
+    screen.MATERIALS=Materials
+    screen.MATERIALS.comment=Settings that relate to materials.
+        screen.EMISSIVE_ORES= Emissive Ores
+        screen.EMISSIVE_ORES.comment=Settings that relate to emissive ores.
+        screen.IPBR_NORMALS=Auto Generated Normals
+        screen.IPBR_NORMALS.comment=Settings that relate to Auto Generated Normals.
+
+option.AURORA_COLOR_PRESET=Color Preset
+option.AURORA_COLOR_PRESET.comment=Choose between default look/custom colored auroras, varying colored auroras, where the aurora color changes each Minecraft month or color presets.
+value.AURORA_COLOR_PRESET.0=Custom
+value.AURORA_COLOR_PRESET.1=§o§lVarying
+value.AURORA_COLOR_PRESET.2=§9v§b4
+value.AURORA_COLOR_PRESET.3=§cG§4h§bo§3s§bt
+value.AURORA_COLOR_PRESET.4=§9Ne§5bu§dl§5a
+value.AURORA_COLOR_PRESET.5=§cB§6l§ca§6z§ei§6n§eg
+value.AURORA_COLOR_PRESET.6=§6E§dn§5d
+value.AURORA_COLOR_PRESET.7=§bI§3c§9e
+value.AURORA_COLOR_PRESET.8=§cWa§6t§ce§a§6r§am§2e§al§2on
+value.AURORA_COLOR_PRESET.9=§bEt§3h§be§dr§3e§dal
+value.AURORA_COLOR_PRESET.10=§bPe§3r§bm§3af§cr§3o§cst
+value.AURORA_COLOR_PRESET.11=§dP§5i§dn§5k
+
+option.RAINBOW_AURORA=Rainbow Aurora
+option.RAINBOW_AURORA.comment=Be an Epic Gamer with §4R§2G§9B §fAuroras.
+
+option.BLOCKY_AURORA=Blocky Aurora
+option.BLOCKY_AURORA.comment=Enables Blocky Auroras.
+value.BLOCKY_AURORA.true=§aON
+value.BLOCKY_AURORA.false=§aOFF
+
+option.AURORA_UP_R=Upper Section - Red
+option.AURORA_UP_G=Upper Section - Green
+option.AURORA_UP_B=Upper Section - Blue
+option.AURORA_UP_I=Upper Section - Intensity
+
+option.AURORA_DOWN_R=Lower Section - Red
+option.AURORA_DOWN_G=Lower Section - Green
+option.AURORA_DOWN_B=Lower Section - Blue
+option.AURORA_DOWN_I=Lower Section - Intensity
+
+option.AURORA_SIZE=Aurora Density
+option.AURORA_SIZE.comment=Density controls the apparent height and the size of the Aurora.
+
+option.AURORA_DRAW_DISTANCE=Aurora Draw Distance
+option.AURORA_DRAW_DISTANCE.comment=Draw Distance controls the distance boundary of the Aurora.
+
+option.SUN_ANGLE=Sun Angle
+option.SUN_ANGLE.comment=Change the Sun and Moon angle, default is 0, in §bComplementary v4 §fthe default is -40.
+
+option.CLOUD_WIDTH=Cloud Width
+option.CLOUD_STRETCH=Cloud Height
+option.CLOUD_SPEED=Cloud Speed
+option.CLOUD_TRANSPARENCY=Cloud Transparency
+
+option.WAVE_SPEED=Waving Speed
+option.WAVE_SPEED.comment=Waving Speed for foliage and leaves.
+
+option.NIGHT_BRIGHTNESS=Night Brightness
+option.NIGHT_BRIGHTNESS.comment=Setting to adjust the night brightness.
+
+
+option.GLOWING_REDSTONE_BLOCK=Emissive Redstone Block
+option.GLOWING_EMERALD_BLOCK=Emissive Emerald Block
+option.GLOWING_LAPIS_BLOCK=Emissive Lapis Block
+option.GLOWING_AMETHYST_BLOCK=Glowing Amethyst Block
+value.GLOWING_AMETHYST_BLOCK.0=§cOFF
+value.GLOWING_AMETHYST_BLOCK.1=Version 1
+value.GLOWING_AMETHYST_BLOCK.2=Version 2
+
+option.ORE_EMISSION=Glowing Ores Intensity
+option.ORE_EMISSION.comment=Change the brightness of the glowing ores.
+
+option.GLOWING_WART=Glowing Wart Blocks
+option.GLOWING_WART.comment=Setting which enables animated emissive wart blocks.
+
+option.OVERWORLD_BEAMS=Overworld Beams
+option.OVERWORLD_BEAMS.comment=Setting which enabled nebula like beams during the night in the Overworld.
+
+option.STAR_BRIGHTNESS=Star Brightness
+option.STAR_BRIGHTNESS.comment=Setting to adjust the star brightness.
+
+option.SITUATIONAL_ORES=Situational Ores
+option.SITUATIONAL_ORES.comment=Ores will only glow when there is no skylight. §e[*]§r Glowing Ores must be enabled for this to work.
+
+option.WAVE_INTENSITY=Water Wave Intensity
+option.WAVE_INTENSITY.comment=Change the intensity of the realistic water waves.
+
+option.SCENE_AWARE_LIGHT_SHAFTS=Scene Aware Light Shafts
+option.SCENE_AWARE_LIGHT_SHAFTS.comment=Enable or disable scene aware light shafts.
+value.SCENE_AWARE_LIGHT_SHAFTS.true=§aON
+value.SCENE_AWARE_LIGHT_SHAFTS.false=§aOFF
+
+option.UNDERWATER_DISTORTION_STRENGTH=Underwater Distortion Strength
+option.UNDERWATER_DISTORTION_STRENGTH.comment=Setting to alter the Underwater Distortion Strength.
+value.UNDERWATER_DISTORTION_STRENGTH.0=§cOFF
+
+option.GLOWING_DEBRIS=Emissive Ancient Debris
+option.GLOWING_IRON=Emissive Iron Ore
+option.GLOWING_COPPER=Emissive Copper Ore
+option.GLOWING_GOLD=Emissive Gold ore
+option.GLOWING_NETHER_GOLD=Emissive Nether Gold Ore
+option.GLOWING_DIAMOND=Emissive Diamond Ore
+option.GLOWING_EMERALD=Emissive Emerald Ore
+option.GLOWING_LAPIS=Emissive Lapis Ore
+option.GLOWING_QUARTZ=Emissive Nether Quartz Ore
+option.GLOWING_GILDED_BLACKSTONE=Emissive Gilded Blackstone
+option.GLOWING_REDSTONE=Emissive Redstone Ore
+
+option.RANDOM_BLOCKLIGHT=Random Colored Blocklight
+
+option.NORMAL_RES=Normals Resolution
+option.NORMAL_RES.comment=Change the resolution at which the integrated normal maps render.
+option.NORMAL_THRESHOLD=Normals Strength
+option.NORMAL_THRESHOLD.comment=Change how strong or weak the integrated normal maps will be.
diff --git a/shaders/lib/atmospherics/auroraBorealis.glsl b/shaders/lib/atmospherics/auroraBorealis.glsl
index b2b5de3..969006a 100644
--- a/shaders/lib/atmospherics/auroraBorealis.glsl
+++ b/shaders/lib/atmospherics/auroraBorealis.glsl
@@ -1,5 +1,5 @@
 vec3 GetAuroraBorealis(vec3 viewPos, float VdotU, float dither) {
-    float visibility = sqrt1(clamp01(VdotU * 1.5 - 0.225)) - sunVisibility - rainFactor;
+    float visibility = sqrt1(clamp01(VdotU * (AURORA_DRAW_DISTANCE * 1.125 + 0.75) - 0.225)) - sunVisibility - rainFactor;
     visibility *= 1.0 - VdotU * 0.75;
 
     #if AURORA_CONDITION == 1 || AURORA_CONDITION == 3
@@ -16,27 +16,90 @@
              wpos.xz /= wpos.y;
         vec2 cameraPositionM = cameraPosition.xz * 0.0075;
              cameraPositionM.x += syncedTime * 0.04;
-        
+
         int sampleCount = 25;
         int sampleCountP = sampleCount + 5;
         float ditherM = dither + 5.0;
         float auroraAnimate = frameTimeCounter * 0.0015;
+
+        #ifndef BLOCKY_AURORA
+            auroraAnimate /= 2;
+        #endif
+
+        #if AURORA_COLOR_PRESET == 0
+            vec3 auroraUp = vec3(AURORA_UP_R, AURORA_UP_G, AURORA_UP_B);
+            vec3 auroraDown = vec3(AURORA_DOWN_R, AURORA_DOWN_G, AURORA_DOWN_B);
+        #else
+            vec3 auroraUpA[] = vec3[](
+                vec3(112.0, 36.0, 192.0),
+                vec3(112.0, 80.0, 255.0),
+                vec3(255.0, 80.0, 112.0),
+                vec3(72.0, 96.0, 192.0),
+                vec3(255.0, 56.0, 64.0),
+                vec3(232.0, 116.0, 232.0),
+                vec3(212.0, 108.0, 216.0),
+                vec3(120.0, 212.0, 56.0),
+                vec3(64.0, 255.0, 255.0),
+                vec3(168.0, 36.0, 88.0),
+                vec3(255.0, 68.0, 124.0)
+            );
+            vec3 auroraDownA[] = vec3[](
+                vec3(96.0, 255.0, 192.0),
+                vec3(80.0, 255.0, 180.0),
+                vec3(80.0, 255.0, 180.0),
+                vec3(172.0, 44.0, 88.0),
+                vec3(204.0, 172.0, 12.0),
+                vec3(244.0, 188.0, 28.0),
+                vec3(92.0, 188.0, 180.0),
+                vec3(176.0, 88.0, 72.0),
+                vec3(128.0, 64.0, 128.0),
+                vec3(60.0, 184.0, 152.0),
+                vec3(160.0, 96.0, 255.0)
+            );
+            #if AURORA_COLOR_PRESET > 1
+                int p = AURORA_COLOR_PRESET-1;
+            #else
+                int p = worldDay % 72 / 8;
+            #endif
+            vec3 auroraUp = auroraUpA[p];
+            vec3 auroraDown = auroraDownA[p];
+        #endif
+        
+        #ifdef RAINBOW_AURORA
+            auroraUp *= abs(fract(frameTimeCounter * 0.01 + vec3(1.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0);
+            auroraDown *= abs(fract(frameTimeCounter * 0.01 + vec3(1.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0);
+        #endif
+
+        auroraUp *= (AURORA_UP_I * 0.093 + 3.1) / GetLuminance(auroraUp);
+        auroraDown *= (AURORA_DOWN_I * 0.245 + 8.15) / GetLuminance(auroraDown);
+
         for (int i = 0; i < sampleCount; i++) {
             float current = pow2((i + ditherM) / sampleCountP);
 
-            vec2 planePos = wpos.xz * (0.8 + current);
-            planePos = floor(planePos * 11.0 + cameraPositionM) * 0.0007;
+            vec2 planePos = wpos.xz * (AURORA_SIZE * 0.6 + 0.4 + current);
+            planePos = planePos * 11.0 + cameraPositionM;
+
+            #ifdef BLOCKY_AURORA
+                planePos = floor(planePos);
+            #endif
+
+            planePos *= 0.0007;
 
             float noise = texture2D(noisetex, planePos).b;
             noise = pow2(pow2(pow2(pow2(1.0 - 2.0 * abs(noise - 0.5)))));
-            noise *= pow1_5(texture2D(noisetex, planePos * 100.0 + auroraAnimate).b);
 
+            #ifndef BLOCKY_AURORA
+                planePos /= 100.0;
+            #endif
+
+            noise *= pow1_5(texture2D(noisetex, planePos * 100.0 + auroraAnimate).b);
             float currentM = 1.0 - current;
-            aurora += noise * currentM * mix(vec3(7.0, 2.2, 12.0), vec3(6.0, 16.0, 12.0), pow2(pow2(currentM)));
+
+            aurora += noise * currentM * mix(auroraUp, auroraDown, pow2(pow2(currentM)));
         }
-        
-        return aurora * 1.3 * visibility / sampleCount;
+
+        return aurora * visibility / sampleCount;
     }
 
     return vec3(0.0);
-}
\ No newline at end of file
+}
diff --git a/shaders/lib/atmospherics/cloudCoord.glsl b/shaders/lib/atmospherics/cloudCoord.glsl
index 62b58e6..e718edd 100644
--- a/shaders/lib/atmospherics/cloudCoord.glsl
+++ b/shaders/lib/atmospherics/cloudCoord.glsl
@@ -1,7 +1,5 @@
-const float cloudNarrowness = 0.05;
-
 #ifdef DEFERRED1
-    const float cloudRoundness = 0.125; // for clouds
+    const float cloudRoundness = 0.125; // for clouds 0.125
 #else
     const float cloudRoundness = 0.35; // for cloud shadows
 #endif
@@ -17,8 +15,8 @@
 }
 
 vec3 ModifyTracePos(vec3 tracePos, float cloudAltitude) {
-    tracePos.x += syncedTime;
+    tracePos.x += syncedTime * CLOUD_SPEED;
     tracePos.z += cloudAltitude * 64.0;
-    tracePos.xz *= cloudNarrowness;
+    tracePos.xz *= CLOUD_WIDTH;
     return tracePos.xyz;
 }
\ No newline at end of file
diff --git a/shaders/lib/atmospherics/overworldBeams.glsl b/shaders/lib/atmospherics/overworldBeams.glsl
new file mode 100644
index 0000000..875eac6
--- /dev/null
+++ b/shaders/lib/atmospherics/overworldBeams.glsl
@@ -0,0 +1,54 @@
+#include "/lib/colors/lightAndAmbientColors.glsl"
+
+vec3 beamCol = normalize(ambientColor * ambientColor * ambientColor) * 50.0 * (2.5 - 1.0 * vlFactor);
+
+vec2 wind = vec2(syncedTime * 0.0056);
+
+float BeamNoise(vec2 planeCoord, vec2 wind) {
+    float noise = texture2D(noisetex, planeCoord * 0.275   - wind * 0.0625).b;
+          noise+= texture2D(noisetex, planeCoord * 0.34375 + wind * 0.0575).b * 10.0;
+
+    return noise;
+}
+
+vec3 DrawOverworldBeams(float VdotU, vec3 playerPos) {
+    float visibility = 1.0 - sunVisibility;
+    if (visibility > 0.0){
+    vec3 test = vec3(0.0);
+
+    int sampleCount = 8;
+    
+    float VdotUM = 1.0 - VdotU * VdotU;
+    float VdotUM2 = VdotUM + smoothstep1(pow2(pow2(1.0 - abs(VdotU)))) * 0.2;
+
+    vec4 beams = vec4(0.0);
+    float gradientMix = 1.0;
+    for(int i = 0; i < sampleCount; i++) {
+        vec2 planeCoord = (playerPos.xz + cameraPosition.xz) * (1.0 + i * 6.0 / sampleCount) * 0.0014;
+
+        float noise = BeamNoise(planeCoord, wind);
+              noise = max(0.92 - 1.0 / abs(noise - (2.5 + VdotUM * 2.0)), 0.0) * 2.5;
+
+        if (noise > 0.0) {
+            noise *= 0.55;
+            float fireNoise = texture2D(noisetex, abs(planeCoord * 0.2) - wind).b;
+            noise *= 0.5 * fireNoise + 0.75;
+            noise = noise * noise * 3.0 / sampleCount;
+            noise *= VdotUM2;
+
+            vec3 beamColor = beamCol;
+            beamColor *= gradientMix / sampleCount;
+
+            noise *= exp2(-6.0 * i / float(sampleCount));
+            beams += vec4(noise * beamColor, noise);
+        }
+        gradientMix += 1.0;
+    }
+
+    beams.rgb *= beams.a * beams.a * beams.a * 1000.0;
+    // beams.rgb = sqrt(beams.rgb);
+    test = sqrt(beams.rgb);
+    return test * visibility / sampleCount;
+    }
+        return vec3(1.0);
+}
\ No newline at end of file
diff --git a/shaders/lib/atmospherics/stars.glsl b/shaders/lib/atmospherics/stars.glsl
index e2826a2..6680901 100644
--- a/shaders/lib/atmospherics/stars.glsl
+++ b/shaders/lib/atmospherics/stars.glsl
@@ -36,7 +36,7 @@
     star *= starFogFactor * (1.0 - sunVisibility);
     star *= clamp(1.0 - pow(abs(VdotS) * 1.002, 100.0), 0.0, 1.0);
 
-    vec3 stars = (star * 40.0 * invRainFactor) * sqrt(nightMiddleSkyColor);
+    vec3 stars = (star * 40.0 * invRainFactor) * sqrt(nightMiddleSkyColor) * STAR_BRIGHTNESS;
 
     return stars;
-}
\ No newline at end of file
+}
diff --git a/shaders/lib/atmospherics/volumetricClouds.glsl b/shaders/lib/atmospherics/volumetricClouds.glsl
index 13e222c..ec3a295 100644
--- a/shaders/lib/atmospherics/volumetricClouds.glsl
+++ b/shaders/lib/atmospherics/volumetricClouds.glsl
@@ -128,7 +128,7 @@
             #endif
             
             vec3 colorSample = cloudAmbientColor + cloudLightColor * (0.07 + cloudShading);
-            float cloudFogFactor = clamp((distanceThreshold - lTracePos) / distanceThreshold, 0.0, 0.75);
+            float cloudFogFactor = clamp((distanceThreshold - lTracePos) / distanceThreshold, 0.0, 0.75) * CLOUD_TRANSPARENCY;
             colorSample = mix(GetSky(VdotU, VdotS, dither, true, false), colorSample, cloudFogFactor * 0.66666);
             colorSample *= pow2(1.0 - max(blindness, darknessFactor));
             
diff --git a/shaders/lib/atmospherics/volumetricLight.glsl b/shaders/lib/atmospherics/volumetricLight.glsl
index 0a76575..bf0b832 100644
--- a/shaders/lib/atmospherics/volumetricLight.glsl
+++ b/shaders/lib/atmospherics/volumetricLight.glsl
@@ -92,6 +92,10 @@
 			vec3 playerPos = wpos.xyz / wpos.w;
 			vec4 enderBeamSample = vec4(DrawEnderBeams(VdotU, playerPos), 1.0) / sampleCount;
 		#endif
+		#if defined OVERWORLD && defined OVERWORLD_BEAMS
+			vec3 playerPos = wpos.xyz / wpos.w;
+			vec4 overworldBeamSample = vec4(DrawOverworldBeams(VdotU, playerPos), 1.0) / 1.0;
+		#endif
 		wpos = shadowModelView * wpos;
 		wpos = shadowProjection * wpos;
 		wpos /= wpos.w;
@@ -126,7 +130,11 @@
 		if (currentDist > depth0) vlSample *= translucentMult;
 
 		#ifdef OVERWORLD
-			volumetricLight += vec4(vlSample, shadowSample) * sampleMult;
+			#ifdef OVERWORLD_BEAMS
+				volumetricLight += vec4(vlSample, shadowSample) * overworldBeamSample * sampleMult;
+			#else
+				volumetricLight += vec4(vlSample, shadowSample) * sampleMult;
+			#endif
 		#else
 			volumetricLight += vec4(vlSample, shadowSample) * enderBeamSample;
 		#endif
diff --git a/shaders/lib/colors/lightAndAmbientColors.glsl b/shaders/lib/colors/lightAndAmbientColors.glsl
index 21289c7..ee4916a 100644
--- a/shaders/lib/colors/lightAndAmbientColors.glsl
+++ b/shaders/lib/colors/lightAndAmbientColors.glsl
@@ -17,13 +17,15 @@
     vec3 sunsetClearAmbientColor   = noonClearAmbientColor * vec3(1.0, 0.8, 0.7);
 
     #if !defined COMPOSITE && !defined DEFERRED1
-        vec3 nightClearLightColor = vec3(0.15, 0.14, 0.20) * (0.4 + vsBrightness * 0.4); //ground color
+        vec3 nightClearLightColor0 = vec3(0.15, 0.14, 0.20) * (0.4 + vsBrightness * 0.4); //ground color
     #elif defined DEFERRED1
-        vec3 nightClearLightColor = vec3(0.11, 0.14, 0.20); //cloud color
+        vec3 nightClearLightColor0 = vec3(0.11, 0.14, 0.20); //cloud color
     #else
-        vec3 nightClearLightColor = vec3(0.07, 0.12, 0.27) * (0.25 + vsBrightness * 0.25); //light shaft color
+        vec3 nightClearLightColor0 = vec3(0.07, 0.12, 0.27) * (0.25 + vsBrightness * 0.25); //light shaft color
     #endif
-    vec3 nightClearAmbientColor   = vec3(0.09, 0.12, 0.17) * (1.55 + vsBrightness * 0.77);
+    vec3 nightClearLightColor = nightClearLightColor0 * NIGHT_BRIGHTNESS;
+    vec3 nightClearAmbientColor0   = vec3(0.09, 0.12, 0.17) * (1.55 + vsBrightness * 0.77);
+    vec3 nightClearAmbientColor = nightClearAmbientColor0 * NIGHT_BRIGHTNESS;
 
     vec3 dayRainLightColor   = vec3(0.1, 0.12, 0.24) * (0.75 + vsBrightness * 0.25);
     vec3 dayRainAmbientColor = vec3(0.17, 0.21, 0.3) * (1.5 + vsBrightness);
@@ -50,6 +52,9 @@
     vec3 endLightColor = vec3(0.65, 0.50, 1.0);
     vec3 lightColor    = endLightColor * (0.09 + 0.03 * vsBrightness);
     vec3 ambientColor  = endLightColor * (0.45 + 0.10 * vsBrightness);
-#endif
+// #endif
+#elif defined OVERWORLD && defined OVERWORLD_BEAMS
+    vec3 ambientColor = mix(clearAmbientColor, rainAmbientColor, rainFactor);
+    #endif
 
 #endif
\ No newline at end of file
diff --git a/shaders/lib/colors/skyColors.glsl b/shaders/lib/colors/skyColors.glsl
index a5f85ea..abdb5f1 100644
--- a/shaders/lib/colors/skyColors.glsl
+++ b/shaders/lib/colors/skyColors.glsl
@@ -16,7 +16,7 @@
     vec3 dayMiddleSkyColor = mix(noonMiddleSkyColor, sunsetMiddleSkyColor, invNoonFactor) * mix(vec3(1.0), vec3(0.6, 0.65, 0.8) * 0.6, rainFactor);
     vec3 dayDownSkyColor   = mix(noonDownSkyColor, sunsetDownSkyColor * 0.5, invNoonFactor);
 
-    vec3 nightColFactor      = mix(vec3(0.07, 0.14, 0.24), vec3(0.04, 0.06, 0.12) * 0.6, rainFactor);
+    vec3 nightColFactor      = mix(vec3(0.07, 0.14, 0.24), vec3(0.04, 0.06, 0.12) * 0.6, rainFactor) * NIGHT_BRIGHTNESS;
     vec3 nightUpSkyColor     = pow(nightColFactor + skyColor, vec3(0.90)) * 0.4;
     vec3 nightMiddleSkyColor = pow(nightUpSkyColor, vec3(0.75)) * 1.3;
     vec3 nightDownSkyColor   = nightUpSkyColor * 1.3;
diff --git a/shaders/lib/common.glsl b/shaders/lib/common.glsl
index 0e06c8c..5f5a9e4 100644
--- a/shaders/lib/common.glsl
+++ b/shaders/lib/common.glsl
@@ -4,14 +4,14 @@
          | || |\/| | |_) | | | | |_) || | / _ \ |  \| | | |  
          | || |  | |  __/| |_| |  _ < | |/ ___ \| |\  | | |  
         |___|_|  |_|_|    \___/|_| \_\|_/_/   \_\_| \_| |_|  
-         .
+         
   -> -> -> EDITING THIS FILE HAS A HIGH CHANCE TO BREAK THE SHADERPACK
   -> -> -> DO NOT CHANGE ANYTHING UNLESS YOU KNOW WHAT YOU ARE DOING
   -> -> -> DO NOT EXPECT SUPPORT AFTER MODIFYING SHADER FILES
 ---------------------------------------------------------------------*/
 
 //User Settings//
-    #define CMPR 3 //[0 1 2 3 4 5]
+    #define CMPR 3 //[0 1 2 3 4 5 6]
 
     #define RP_MODE 1 //[0 1]
 
@@ -63,6 +63,148 @@
     //#define FANCY_GLASS
     //#define GENERATED_WATER_NORMALS
 
+    #define UNDERWATER_DISTORTION
+
+//Overimagined//
+    #define AURORA_COLOR_PRESET 0 //[0 1 2 3 4 5 6 7 8 9 10 11] // 0 is manual and default, 1 is monthly and 2 is one color preset same with all numbers after
+        
+	#define AURORA_UP_R 112 //[0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 255]
+	#define AURORA_UP_G 36 //[0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 255]
+	#define AURORA_UP_B 192 //[0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 255]
+    #define AURORA_UP_I 33 //[0 3 5 8 10 13 15 18 20 23 25 28 30 33 35 38 40 43 45 48 50 53 55 58 60 63 65 68 70 73 75 78 80 83 85 88 90 93 95 98 100]
+    
+	#define AURORA_DOWN_R 96 //[0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 255]
+	#define AURORA_DOWN_G 255 //[0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 255]
+	#define AURORA_DOWN_B 192 //[0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 255]
+    #define AURORA_DOWN_I 33 //[0 3 5 8 10 13 15 18 20 23 25 28 30 33 35 38 40 43 45 48 50 53 55 58 60 63 65 68 70 73 75 78 80 83 85 88 90 93 95 98 100]
+    
+    #define AURORA_SIZE 0.65 //[0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00]
+    #define AURORA_DRAW_DISTANCE 0.65 //[0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00]
+
+    #define BLOCKY_AURORA
+    //#define RAINBOW_AURORA
+
+//Prepare for... whatever this is :ioa:
+    #define SUN_ANGLE 0 //[-60 -55 -50 -45 -40 -35 -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 50 55 60]
+    #if SUN_ANGLE == -60
+    const float sunPathRotation = -60.0;
+    #elif SUN_ANGLE == -55
+    const float sunPathRotation = -55.0;
+    #elif SUN_ANGLE == -50
+    const float sunPathRotation = -50.0;
+    #elif SUN_ANGLE == -45
+    const float sunPathRotation = -45.0;
+    #elif SUN_ANGLE == -40
+    const float sunPathRotation = -40.0;
+    #elif SUN_ANGLE == -35
+    const float sunPathRotation = -35.0;
+    #elif SUN_ANGLE == -30
+    const float sunPathRotation = -30.0;
+    #elif SUN_ANGLE == -25
+    const float sunPathRotation = -25.0;
+    #elif SUN_ANGLE == -20
+    const float sunPathRotation = -20.0;
+    #elif SUN_ANGLE == -15
+    const float sunPathRotation = -15.0;
+    #elif SUN_ANGLE == -10
+    const float sunPathRotation = -10.0;
+    #elif SUN_ANGLE == -5
+    const float sunPathRotation = -5.0;
+    #elif SUN_ANGLE == 0
+    const float sunPathRotation = 0.0;
+    #define PERPENDICULAR_TWEAKS
+    #elif SUN_ANGLE == 5
+    const float sunPathRotation = 5.0;
+    #elif SUN_ANGLE == 10
+    const float sunPathRotation = 10.0;
+    #elif SUN_ANGLE == 15
+    const float sunPathRotation = 15.0;
+    #elif SUN_ANGLE == 20
+    const float sunPathRotation = 20.0;
+    #elif SUN_ANGLE == 25
+    const float sunPathRotation = 25.0;
+    #elif SUN_ANGLE == 30
+    const float sunPathRotation = 30.0;
+    #elif SUN_ANGLE == 35
+    const float sunPathRotation = 35.0;
+    #elif SUN_ANGLE == 40
+    const float sunPathRotation = 40.0;
+    #elif SUN_ANGLE == 45
+    const float sunPathRotation = 45.0;
+    #elif SUN_ANGLE == 50
+    const float sunPathRotation = 50.0;
+    #elif SUN_ANGLE == 55
+    const float sunPathRotation = 55.0;
+    #elif SUN_ANGLE == 60
+    const float sunPathRotation = 60.0;
+    #endif
+//Congrats! You survived whatever that was...
+
+    #define CLOUD_WIDTH 0.05 //[0.025 0.03 0.035 0.04 0.045 0.05 0.055 0.06 0.065 0.07 0.075]
+    #define CLOUD_SPEED 1.0 //[0.75 1.0 1.5 2.0 3.0 4.0]
+    
+    #define WAVE_SPEED 1.0 //[0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0]
+
+    #define NIGHT_BRIGHTNESS 1.0 //[0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6. 1.7 1.8 1.9 2.0]
+    
+    #define WAVE_INTENSITY 1.25 //[0.0 0.25 0.5 0.75 1.0 1.25 1.5 1.75 2.0]
+    //#define OVERWORLD_BEAMS
+
+    //#define GLOWING_EMERALD_BLOCK
+    //#define GLOWING_REDSTONE_BLOCK
+    //#define GLOWING_LAPIS_BLOCK
+    #define GLOWING_AMETHYST_BLOCK 0 //[0 1 2]
+
+
+    #define ORE_EMISSION 1.0 //[0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0]
+
+    #define GLOWING_DEBRIS
+    #define GLOWING_IRON
+    #define GLOWING_COPPER
+    #define GLOWING_GOLD
+    #define GLOWING_NETHER_GOLD
+    #define GLOWING_DIAMOND
+    #define GLOWING_EMERALD
+    #define GLOWING_LAPIS
+    #define GLOWING_QUARTZ
+    #define GLOWING_GILDED_BLACKSTONE
+    #define GLOWING_REDSTONE
+
+    //#define GLOWING_WART
+    
+    #define STAR_BRIGHTNESS 1.0 //[0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0]
+    
+    //#define SITUATIONAL_ORES
+
+//Oh no, another one of those...
+    #define UNDERWATER_DISTORTION_STRENGTH 6 //[0 1 2 3 4 5 6 7 8]
+    #if UNDERWATER_DISTORTION_STRENGTH == 0
+    #undef UNDERWATER_DISTORTION
+    #elif UNDERWATER_DISTORTION_STRENGTH == 1
+    const float underwaterDistortionStrength = 0.5;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 2
+    const float underwaterDistortionStrength = 1.0;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 3
+    const float underwaterDistortionStrength = 1.5;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 4
+    const float underwaterDistortionStrength = 2.0;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 5
+    const float underwaterDistortionStrength = 2.5;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 6
+    const float underwaterDistortionStrength = 3.0;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 7
+    const float underwaterDistortionStrength = 3.5;
+    #elif UNDERWATER_DISTORTION_STRENGTH == 8
+    const float underwaterDistortionStrength = 4.0;
+    #endif
+
+    #define CLOUD_TRANSPARENCY 1.0 //[0.5 0.6 0.7 0.8 0.9 1.0]
+
+    //#define RANDOM_BLOCKLIGHT
+
+    #define NORMAL_RES 128.0 //[80.0 96.0 112.0 128.0 144.0 160.0 176.0 192.0 208.0 224.0 240.0 256.0]
+    #define NORMAL_THRESHOLD -0.05 //[-0.05 -0.0375 -0.025 -0.0125 0.00 0.0125 0.025 0.0375 0.05]
+
 //Internal Settings//
 
     #define PBR_REFLECTIONS
@@ -74,16 +216,13 @@
     #define SHADOW_FILTERING
     const int shadowMapResolution = 2048;
 
-    // Disable PERPENDICULAR_TWEAKS if you change sunPathRotation to anything but 0.0 or else you will get incorrect lighting
-    const float sunPathRotation = 0.0;
-    #define PERPENDICULAR_TWEAKS
     #define SIDE_SHADOWING
 
     #define LIGHT_HIGHLIGHT
     #define DIRECTIONAL_SHADING
     #define SSAO_QUALITY 1 //[1 2 3]
 
-    #define CLOUD_STRETCH 5.5
+    #define CLOUD_STRETCH 5.5 //[2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5]
     #define ATMOSPHERIC_FOG
     #define SCENE_AWARE_LIGHT_SHAFTS
     #define CAVE_FOG
@@ -97,7 +236,6 @@
     //#define SAFER_GENERATED_NORMALS
 
     #define BLOOM
-    #define UNDERWATER_DISTORTION
 
 //Define Handling//
     #ifndef OVERWORLD
@@ -373,4 +511,4 @@
 
     float smoothstep1(float x) {
         return x * x * (3.0 - 2.0 * x);
-    }
\ No newline at end of file
+    }
diff --git a/shaders/lib/lighting/mainLighting.glsl b/shaders/lib/lighting/mainLighting.glsl
index e6681cb..4aacdf5 100644
--- a/shaders/lib/lighting/mainLighting.glsl
+++ b/shaders/lib/lighting/mainLighting.glsl
@@ -205,6 +205,16 @@
         lightmapXM = pow(lightmapXMSteep + lightmapXMCalm, 1.5);
     } else lightmapXM = lightmap.x * lightmap.x * 3.0;
 
+    //Overimagied
+    #ifdef RANDOM_BLOCKLIGHT
+        vec3 worldPos = playerPos + cameraPosition;
+		float CLr = texture2D(noisetex, 0.00006 * (worldPos.xz + cameraPosition.xz)).r;
+		float CLg = texture2D(noisetex, 0.00009 * (worldPos.xz + cameraPosition.xz)).r;
+		float CLb = texture2D(noisetex, 0.00014 * (worldPos.xz + cameraPosition.xz)).r;
+		vec3 blocklightColor = vec3(CLr, CLg, CLb);
+		blocklightColor *= blocklightColor * 0.45 * 2.22;
+	#endif
+
     // Minimum Light
     #if !defined END && MINIMUM_LIGHT_MODE > 0
         #if MINIMUM_LIGHT_MODE == 1
@@ -270,7 +280,11 @@
     #endif
 
     // Combine Lighting
+    #ifdef RANDOM_BLOCKLIGHT
+    vec3 blockLighting = lightmapXM * blocklightCol * blocklightColor;
+    #else
     vec3 blockLighting = lightmapXM * blocklightCol;
+    #endif
     vec3 sceneLighting = shadowLighting * shadowMult + ambientColor * ambientMult;
     float dotSceneLighting = dot(sceneLighting, sceneLighting);
     
diff --git a/shaders/lib/materials/deferredReflections.glsl b/shaders/lib/materials/deferredReflections.glsl
index 1cd61af..d38e06e 100644
--- a/shaders/lib/materials/deferredReflections.glsl
+++ b/shaders/lib/materials/deferredReflections.glsl
@@ -55,6 +55,8 @@
 if (reflection.a < 1.0) {
     #ifdef OVERWORLD
         vec3 skyReflection = GetSky(RVdotU, RVdotS, dither, false, true) * skyLightFactor;
+    // #elif defined OVERWORLD && defined OVERWORLD_BEAMS
+    //     vec3 skyReflection = GetSky(RVdotU, RVdotS, dither, false, true) * DrawOverworldBeams(RVdotU, planePos) * skyLightFactor;
     #elif defined END
         vec3 skyReflection = (endSkyColor + 0.4 * DrawEnderBeams(RVdotU, playerPos)) * skyLightFactor;
     #else
diff --git a/shaders/lib/materials/generatedNormals.glsl b/shaders/lib/materials/generatedNormals.glsl
index 4bfa869..3a07b06 100644
--- a/shaders/lib/materials/generatedNormals.glsl
+++ b/shaders/lib/materials/generatedNormals.glsl
@@ -1,6 +1,3 @@
-const float normalThreshold = 0.05;
-const float packSizeGN = 128.0;
-
 float GetDif(float lOriginalAlbedo, vec2 offsetCoord) {
     #ifndef GBUFFERS_WATER
         float lNearbyAlbedo = length(texture2D(texture, offsetCoord).rgb);    
@@ -9,8 +6,8 @@
         float lNearbyAlbedo = length(textureSample.rgb * textureSample.a * 1.5);
     #endif
     float dif = lOriginalAlbedo - lNearbyAlbedo;
-    if (dif > 0.0) dif = max(dif - normalThreshold, 0.0);
-    else           dif = min(dif + normalThreshold, 0.0);
+    if (dif > 0.0) dif = max(dif + NORMAL_THRESHOLD, 0.0);
+    else           dif = min(dif - NORMAL_THRESHOLD, 0.0);
     return dif;
 }
 
@@ -25,7 +22,7 @@
     #else
         vec2 offsetR = max(absMidCoordPos2.x, absMidCoordPos2.y) * vec2(float(atlasSize.y) / float(atlasSize.x), 1.0);
     #endif
-    offsetR /= packSizeGN;
+    offsetR /= NORMAL_RES;
 
     vec2 midCoord = texCoord - midCoordPos;
     vec2 maxOffsetCoord = midCoord + absMidCoordPos;
diff --git a/shaders/lib/materials/specificMaterials/emeraldBlock.glsl b/shaders/lib/materials/specificMaterials/emeraldBlock.glsl
index dc8e2f9..335e5a9 100644
--- a/shaders/lib/materials/specificMaterials/emeraldBlock.glsl
+++ b/shaders/lib/materials/specificMaterials/emeraldBlock.glsl
@@ -11,4 +11,4 @@
 
 #ifdef COATED_TEXTURES
     noiseFactor = 0.5;
-#endif
\ No newline at end of file
+#endif
diff --git a/shaders/lib/materials/specificMaterials/lapisBlock.glsl b/shaders/lib/materials/specificMaterials/lapisBlock.glsl
index 1b562e0..3f99b0f 100644
--- a/shaders/lib/materials/specificMaterials/lapisBlock.glsl
+++ b/shaders/lib/materials/specificMaterials/lapisBlock.glsl
@@ -3,4 +3,4 @@
 
 #ifdef COATED_TEXTURES
     noiseFactor = 0.5;
-#endif
\ No newline at end of file
+#endif
diff --git a/shaders/lib/materials/specificMaterials/redstoneBlock.glsl b/shaders/lib/materials/specificMaterials/redstoneBlock.glsl
index 7bc1fa0..4e101f5 100644
--- a/shaders/lib/materials/specificMaterials/redstoneBlock.glsl
+++ b/shaders/lib/materials/specificMaterials/redstoneBlock.glsl
@@ -8,4 +8,4 @@
 
 #ifdef COATED_TEXTURES
     noiseFactor = 0.77;
-#endif
\ No newline at end of file
+#endif
diff --git a/shaders/lib/materials/specificMaterials/translucents/water.glsl b/shaders/lib/materials/specificMaterials/translucents/water.glsl
index 12c64e8..1e6e831 100644
--- a/shaders/lib/materials/specificMaterials/translucents/water.glsl
+++ b/shaders/lib/materials/specificMaterials/translucents/water.glsl
@@ -98,7 +98,7 @@
             wind *= 0.8;
             vec2 parallaxMult = 0.0005 * viewVector.xy / lViewPos;
             float normalOffset = 0.002;
-            float waveMult = 1.25;
+            float waveMult = WAVE_INTENSITY;
 
             for (int i = 0; i < 4; i++) {
                 float height = 0.5 - GetWaterHeightMap(waterPos, nViewPos, wind);
diff --git a/shaders/lib/materials/terrainMaterials.glsl b/shaders/lib/materials/terrainMaterials.glsl
index e4fbc84..958d4a4 100644
--- a/shaders/lib/materials/terrainMaterials.glsl
+++ b/shaders/lib/materials/terrainMaterials.glsl
@@ -306,7 +306,7 @@
                         }
                     } else {
                         if (mat < 10152) {
-                            if (mat == 10144) { // Warped Nylium, Warped Wart Block
+                            if (mat == 10144) { // Warped Nylium
                                 if (color.g == color.b && color.g > 0.0001) { // Warped Nylium:Netherrack Part
                                     #include "/lib/materials/specificMaterials/netherrack.glsl"
                                 } else { // Warped Nylium:Nylium Part, Warped Wart Block
@@ -318,7 +318,20 @@
                                     #endif
                                 }
                             }
-                            else /*if (mat == 10148)*/ { // Crimson Nylium, Nether Wart Block
+                            if (mat == 10146) { // Warped Wart Block
+                                    smoothnessG = color.g * 0.5;
+                                    smoothnessD = smoothnessG;
+                                    
+                                    #ifdef GLOWING_WART
+                                        float animation = abs(sin(frameTimeCounter * 0.75)-1.0);
+                                        emission = pow(float(color.g - color.b), 3.0) * 30.0 * animation;
+                                    #endif
+
+                                    #ifdef COATED_TEXTURES
+                                        noiseFactor = 0.77;
+                                    #endif
+                            }
+                            if (mat == 10148) { // Crimson Nylium
                                 if (color.g == color.b && color.g > 0.0001 && color.r < 0.522) { // Crimson Nylium:Netherrack Part
                                     #include "/lib/materials/specificMaterials/netherrack.glsl"
                                 } else { // Crimson Nylium:Nylium Part, Nether Wart Block
@@ -330,6 +343,24 @@
                                     #endif
                                 }
                             }
+                            if (mat == 10150) { // Nether Wart Block
+                                    smoothnessG = color.r * 0.5;
+                                    smoothnessD = smoothnessG;
+
+                                   #ifdef GLOWING_WART
+                                        float animation = abs(sin(frameTimeCounter * 0.75)-1.0);
+                                        // emission = pow(float(color.r - color.g), 7.5) * 50.0 * animation;
+                                        if (color.r > 0.21) {
+                                    emission = 2.0 * color.g * animation;
+                                    color.r *= 1.2;
+                                }
+                                        pow2(max0(color.g - color.r)) * 2.0;
+                                    #endif
+
+                                    #ifdef COATED_TEXTURES
+                                        noiseFactor = 0.77;
+                                    #endif
+                            }
                         } else {
                             if (mat == 10152) { // Cobblestone+, Mossy Cobblestone+, Furnace:Unlit, Smoker:Unlit, Blast Furnace:Unlit, Moss Block+, Lodestone, Lever, Piston, Sticky Piston, Dispenser, Dropper
                                 #include "/lib/materials/specificMaterials/cobblestone.glsl"
@@ -549,8 +580,14 @@
                                 #endif
                                 
                                 #if GLOWING_ORES >= 2
-                                    emission = pow2(color.g * 6.0);
-                                    color.rgb *= color.rgb;
+                                    #ifdef GLOWING_DEBRIS
+                                        emission = pow2(color.g * 6.0) * ORE_EMISSION;
+                                        color.rgb *= color.rgb;
+                                        #ifdef SITUATIONAL_ORES
+                                            float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                            emission *= skyLightFactor;
+                                        #endif
+                                    #endif
                                 #endif
                             }
                         }
@@ -588,10 +625,17 @@
                                 if (color.r != color.g) { // Iron Ore:Raw Iron Part
                                     #include "/lib/materials/specificMaterials/rawIronBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (color.r - color.b > 0.15) {
-                                            emission = color.r * 1.5;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_IRON
+                                            if (color.r - color.b > 0.15) {
+                                                emission = color.r * 1.5 * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 1.9));
+                                                emission = color.r * 1.5 * ORE_EMISSION;
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Iron Ore:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -601,10 +645,16 @@
                                 if (color.r != color.g) { // Deepslate Iron Ore:Raw Iron Part
                                     #include "/lib/materials/specificMaterials/rawIronBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (color.r - color.b > 0.15) {
-                                            emission = color.r * 1.5;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_IRON
+                                            if (color.r - color.b > 0.15) {
+                                                emission = color.r * 1.5 * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Deepslate Iron Ore:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -618,10 +668,16 @@
                                 if (color.r != color.g) { // Copper Ore:Raw Copper Part
                                     #include "/lib/materials/specificMaterials/rawCopperBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (max(color.r * 0.5, color.g) - color.b > 0.05) {
-                                            emission = color.r * 2.0 + 0.5;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_COPPER
+                                            if (max(color.r * 0.5, color.g) - color.b > 0.05) {
+                                                emission = (color.r * 2.0 + 0.5) * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Copper Ore:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -636,10 +692,16 @@
                                 if (color.r != color.g) { // Deepslate Copper Ore:Raw Copper Part
                                     #include "/lib/materials/specificMaterials/rawCopperBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (max(color.r * 0.5, color.g) - color.b > 0.05) {
-                                            emission = color.r * 2.0 + 0.5;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_COPPER
+                                            if (max(color.r * 0.5, color.g) - color.b > 0.05) {
+                                                emission = (color.r * 2.0 + 0.5) * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Deepslate Copper Ore:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -664,10 +726,16 @@
                                 if (color.r != color.g || color.r > 0.99) { // Gold Ore:Raw Gold Part
                                     #include "/lib/materials/specificMaterials/rawGoldBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (color.g - color.b > 0.15) {
-                                            emission = color.r + 1.0;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_GOLD
+                                            if (color.g - color.b > 0.15) {
+                                                emission = (color.r + 1.0) * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Gold Ore:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -680,10 +748,16 @@
                                 if (color.r != color.g || color.r > 0.99) { // Deepslate Gold Ore:Raw Gold Part
                                     #include "/lib/materials/specificMaterials/rawGoldBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (color.g - color.b > 0.15) {
-                                            emission = color.r + 1.0;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_GOLD
+                                            if (color.g - color.b > 0.15) {
+                                                emission = (color.r + 1.0) * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Deepslate Gold Ore:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -693,7 +767,13 @@
                                 if (color.g != color.b) { // Nether Gold Ore:Raw Gold Part
                                     #include "/lib/materials/specificMaterials/rawGoldBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        emission = color.g * 1.5;
+                                        #ifdef GLOWING_NETHER_GOLD
+                                            emission = color.g * 1.5 * ORE_EMISSION;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Nether Gold Ore:Netherrack Part
                                     #include "/lib/materials/specificMaterials/netherrack.glsl"
@@ -717,8 +797,14 @@
                                 if (color.r != color.g && (color.b / color.r > 1.5 || color.b > 0.8)) { // Diamond Ore:Diamond Part
                                     #include "/lib/materials/specificMaterials/diamondBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        emission = color.g + 1.5;
-                                        color.rgb *= color.rgb;
+                                        #ifdef GLOWING_DIAMOND
+                                            emission = (color.g + 1.5) * ORE_EMISSION;
+                                            color.rgb *= color.rgb;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Diamond Ore:Stone Part, Diamond Ore:StoneToDiamond part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -732,8 +818,14 @@
                                 } else { // Deepslate Diamond Ore:Diamond Part
                                     #include "/lib/materials/specificMaterials/diamondBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        emission = color.g + 1.5;
-                                        color.rgb *= color.rgb;
+                                        #ifdef GLOWING_DIAMOND
+                                            emission = (color.g + 1.5) * ORE_EMISSION;
+                                            color.rgb *= color.rgb;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 }
                             }
@@ -748,6 +840,18 @@
 
                                 smoothnessD = factor;
 
+                                #if GLOWING_AMETHYST_BLOCK == 1
+                                    //dedicated to Saikōkyūno
+                                    emission = pow2(max0(1.0 - 0.25 * 2.85) * color.g) * 10.0;
+                                    color.g *= 1.0 - emission * 0.2;
+                                #endif
+
+                                #if GLOWING_AMETHYST_BLOCK == 2
+                                    //dedicated to Saikōkyūno
+                                    emission = pow2(max0(1.0 - 0.25 * 2.85) * color.g) * 20.0;
+                                    color.g *= 1.0 - emission * 0.2;
+                                #endif
+
                                 #ifdef COATED_TEXTURES
                                     noiseFactor = 0.66;
                                 #endif
@@ -775,15 +879,25 @@
                         if (mat < 10344) {
                             if (mat == 10336) { // Emerald Block
                                 #include "/lib/materials/specificMaterials/emeraldBlock.glsl"
+                                #ifdef GLOWING_EMERALD_BLOCK
+                                    emission = pow2(pow(color.g, 2.5)) * 9.0;
+                                    color.rgb *= color.rgb;
+                                #endif
                             }
                             else /*if (mat == 10340)*/ { // Emerald Ore
                                 if (color.r != color.g && color.g > 0.45) { // Emerald Ore:Emerald Part
                                     #include "/lib/materials/specificMaterials/emeraldBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (color.g - color.b > 0.2 || color.b > 0.9) {
-                                            emission = 2.0;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_EMERALD
+                                            if (color.g - color.b > 0.2 || color.b > 0.9) {
+                                                emission = 2.0 * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Emerald Ore:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -794,10 +908,16 @@
                                 if (color.r != color.g && color.g > 0.45) { // Deepslate Emerald Ore:Emerald Part
                                     #include "/lib/materials/specificMaterials/emeraldBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        if (color.g - color.b > 0.2 || color.b > 0.9) {
-                                            emission = 2.0;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_EMERALD
+                                            if (color.g - color.b > 0.2 || color.b > 0.9) {
+                                                emission = 2.0 * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Deepslate Emerald Ore:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -814,6 +934,12 @@
                         if (mat < 10360) {
                             if (mat == 10352) { // Lapis Block, Dried Kelp Block
                                 #include "/lib/materials/specificMaterials/lapisBlock.glsl"
+                                #ifdef GLOWING_LAPIS_BLOCK
+                                    if (color.b > color.g) {
+                                        emission = pow2(pow(color.b, 1.5)) * 50.0;
+                                        color.rgb *= color.rgb;
+                                    }
+                                #endif
                             }
                             else /*if (mat == 10356)*/ { // Lapis Ore
                                 if (color.r != color.g) { // Lapis Ore:Lapis Part
@@ -821,10 +947,16 @@
                                     smoothnessG *= 0.5;
                                     smoothnessD *= 0.5;
                                     #if GLOWING_ORES >= 1
-                                        if (color.b - color.r > 0.2) {
-                                            emission = 2.0;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_LAPIS
+                                            if (color.b - color.r > 0.2) {
+                                                emission = 2.0 * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Lapis Ore:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -837,10 +969,16 @@
                                     smoothnessG *= 0.5;
                                     smoothnessD *= 0.5;
                                     #if GLOWING_ORES >= 1
-                                        if (color.b - color.r > 0.2) {
-                                            emission = 2.0;
-                                            color.rgb *= color.rgb;
-                                        }
+                                        #ifdef GLOWING_LAPIS
+                                            if (color.b - color.r > 0.2) {
+                                                emission = 2.0 * ORE_EMISSION;
+                                                color.rgb *= color.rgb;
+                                            }
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Deepslate Lapis Ore:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -856,7 +994,13 @@
                                 if (color.g != color.b) { // Nether Quartz Ore:Quartz Part
                                     #include "/lib/materials/specificMaterials/quartzBlock.glsl"
                                     #if GLOWING_ORES >= 2
-                                        emission = pow2(color.b * 1.5);
+                                        #ifdef GLOWING_QUARTZ
+                                            emission = pow2(color.b * 1.5) * ORE_EMISSION;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Nether Quartz Ore:Netherrack Part
                                     #include "/lib/materials/specificMaterials/netherrack.glsl"
@@ -1119,7 +1263,13 @@
                                 if (color.r > color.b * 3.0) { // Gilded Blackstone:Gilded Part
                                     #include "/lib/materials/specificMaterials/rawGoldBlock.glsl"
                                     #if GLOWING_ORES >= 2
-                                        emission = color.g * 1.5;
+                                        #ifdef GLOWING_GILDED_BLACKSTONE
+                                            emission = color.g * 1.5 * ORE_EMISSION;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Gilded Blackstone:Blackstone Part
                                     #include "/lib/materials/specificMaterials/blackstone.glsl"
@@ -1458,13 +1608,24 @@
                         if (mat < 10616) {
                             if (mat == 10608) { // Redstone Block
                                 #include "/lib/materials/specificMaterials/redstoneBlock.glsl"
+                                #ifdef GLOWING_REDSTONE_BLOCK
+                                    emission = pow2(pow(color.r, 2.5)) * 9.0;
+                                    color.gb *= 0.05;
+                                #endif
+
                             }
                             else /*if (mat == 10612)*/ { // Redstone Ore:Unlit
                                 if (color.r - color.g > 0.2) { // Redstone Ore:Unlit:Redstone Part
                                     #include "/lib/materials/specificMaterials/redstoneBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        emission = pow2(color.r) * color.r * 4.0;
-                                        color.gb *= 0.1;
+                                        #ifdef GLOWING_REDSTONE
+                                            emission = pow2(color.r) * color.r * 4.0 * ORE_EMISSION;
+                                            color.gb *= 0.1;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Redstone Ore:Unlit:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -1474,7 +1635,7 @@
                             if (mat == 10616) { // Redstone Ore:Lit
                                 if (color.r - color.g > 0.2) { // Redstone Ore:Lit:Redstone Part
                                     #include "/lib/materials/specificMaterials/redstoneBlock.glsl"
-                                    emission = pow2(pow2(color.r)) * 6.0;
+                                    emission = pow2(pow2(color.r)) * 6.0 * ORE_EMISSION;
                                     color.gb *= 0.05;
                                 } else { // Redstone Ore:Lit:Stone Part
                                     #include "/lib/materials/specificMaterials/stone.glsl"
@@ -1485,8 +1646,14 @@
                                 if (color.r - color.g > 0.2) { // Deepslate Redstone Ore:Unlit:Redstone Part
                                     #include "/lib/materials/specificMaterials/redstoneBlock.glsl"
                                     #if GLOWING_ORES >= 1
-                                        emission = pow2(color.r) * color.r * 4.0;
-                                        color.gb *= 0.1;
+                                        #ifdef GLOWING_REDSTONE
+                                            emission = pow2(color.r) * color.r * 4.0 * ORE_EMISSION;
+                                            color.gb *= 0.1;
+                                            #ifdef SITUATIONAL_ORES
+                                                float skyLightFactor = pow2(1.0 - min1(lmCoord.y * 2.9));
+                                                emission *= skyLightFactor;
+                                            #endif
+                                        #endif
                                     #endif
                                 } else { // Deepslate Redstone Ore:Unlit:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -1498,7 +1665,7 @@
                             if (mat == 10624) { // Deepslate Redstone Ore:Lit
                                 if (color.r - color.g > 0.2) { // Deepslate Redstone Ore:Lit:Redstone Part
                                     #include "/lib/materials/specificMaterials/redstoneBlock.glsl"
-                                    emission = pow2(pow2(color.r)) * 6.0;
+                                    emission = pow2(pow2(color.r)) * 6.0 * ORE_EMISSION;
                                     color.gb *= 0.05;
                                 } else { // Deepslate Redstone Ore:Lit:Deepslate Part
                                     #include "/lib/materials/specificMaterials/deepslate.glsl"
@@ -2091,4 +2258,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/shaders/lib/materials/wavingBlocks.glsl b/shaders/lib/materials/wavingBlocks.glsl
index 0db0d18..bcb13a9 100644
--- a/shaders/lib/materials/wavingBlocks.glsl
+++ b/shaders/lib/materials/wavingBlocks.glsl
@@ -3,7 +3,7 @@
 #endif
 
 vec3 GetWave(in vec3 pos, float waveSpeed) {
-    float wind = frameTimeCounter * waveSpeed;
+    float wind = frameTimeCounter * waveSpeed * WAVE_SPEED;
 
     float magnitude = sin(wind * 0.0027 + pos.z + pos.y) * 0.04 + 0.04;
     float d0 = sin(wind * 0.0127);
@@ -59,4 +59,4 @@
             DoWave_Leaves(playerPos.xyz, worldPos);
         }
     #endif
-}
\ No newline at end of file
+}
diff --git a/shaders/program/composite.glsl b/shaders/program/composite.glsl
index 5c523f3..2d30cf9 100644
--- a/shaders/program/composite.glsl
+++ b/shaders/program/composite.glsl
@@ -94,6 +94,8 @@
 #if LIGHTSHAFT_QUALITY > 0 && (defined OVERWORLD || defined END)
 	#ifdef END
 		#include "/lib/atmospherics/enderBeams.glsl"
+	#elif defined OVERWORLD && defined OVERWORLD_BEAMS
+		#include "/lib/atmospherics/overworldBeams.glsl"
 	#endif
 	#include "/lib/atmospherics/volumetricLight.glsl"
 #endif
diff --git a/shaders/program/deferred1.glsl b/shaders/program/deferred1.glsl
index b23cf9b..d648746 100644
--- a/shaders/program/deferred1.glsl
+++ b/shaders/program/deferred1.glsl
@@ -202,6 +202,9 @@
 	#ifdef END
 		#include "/lib/atmospherics/enderBeams.glsl"
 	#endif
+	#if defined OVERWORLD && defined OVERWORLD_BEAMS
+		#include "/lib/atmospherics/overworldBeams.glsl"
+	#endif
 #endif
 
 #ifdef AURORA_BOREALIS
@@ -432,6 +435,9 @@
 
 		uniform vec3 cameraPosition;
 	#endif
+	#if defined OVERWORLD && defined OVERWORLD_BEAMS
+		uniform vec3 cameraPosition;
+	#endif
 #endif
 
 //Attributes//
diff --git a/shaders/program/final.glsl b/shaders/program/final.glsl
index 0737d44..6e35e07 100644
--- a/shaders/program/final.glsl
+++ b/shaders/program/final.glsl
@@ -63,7 +63,7 @@
 	vec2 texCoordM = texCoord;
 
 	#ifdef UNDERWATER_DISTORTION
-		if (isEyeInWater == 1) texCoordM += 0.0007 * sin((texCoord.x + texCoord.y) * 25.0 + frameTimeCounter * 3.0);
+		if (isEyeInWater == 1) texCoordM += 0.0007 * sin((texCoord.x + texCoord.y) * 25.0 + frameTimeCounter * underwaterDistortionStrength);
 	#endif
 
 	vec3 color = texture2D(colortex3, texCoordM).rgb;
diff --git a/shaders/program/gbuffers_basic.glsl b/shaders/program/gbuffers_basic.glsl
index d022f8b..5d92841 100644
--- a/shaders/program/gbuffers_basic.glsl
+++ b/shaders/program/gbuffers_basic.glsl
@@ -35,6 +35,10 @@
 	uniform sampler2D gaux3;
 #endif
 
+#ifdef RANDOM_BLOCKLIGHT
+	uniform sampler2D noisetex;
+#endif
+
 //Pipeline Constants//
 
 //Common Variables//
diff --git a/shaders/program/gbuffers_block.glsl b/shaders/program/gbuffers_block.glsl
index 3c95749..7e96c97 100644
--- a/shaders/program/gbuffers_block.glsl
+++ b/shaders/program/gbuffers_block.glsl
@@ -49,7 +49,7 @@
 	uniform ivec2 atlasSize;
 #endif
 
-#ifdef COATED_TEXTURES
+#if defined COATED_TEXTURES || defined RANDOM_BLOCKLIGHT
 	uniform sampler2D noisetex;
 #endif
 
diff --git a/shaders/program/gbuffers_entities.glsl b/shaders/program/gbuffers_entities.glsl
index 6490bbf..9e42a34 100644
--- a/shaders/program/gbuffers_entities.glsl
+++ b/shaders/program/gbuffers_entities.glsl
@@ -44,6 +44,10 @@
 	uniform sampler2D gaux3;
 #endif
 
+#ifdef RANDOM_BLOCKLIGHT
+	uniform sampler2D noisetex;
+#endif
+
 //Pipeline Constants//
 
 //Common Variables//
diff --git a/shaders/program/gbuffers_hand.glsl b/shaders/program/gbuffers_hand.glsl
index 7a4c92f..41b060b 100644
--- a/shaders/program/gbuffers_hand.glsl
+++ b/shaders/program/gbuffers_hand.glsl
@@ -37,6 +37,10 @@
 	uniform sampler2D gaux3;
 #endif
 
+#ifdef RANDOM_BLOCKLIGHT
+	uniform sampler2D noisetex;
+#endif
+
 //Pipeline Constants//
 
 //Common Variables//
diff --git a/shaders/program/gbuffers_terrain.glsl b/shaders/program/gbuffers_terrain.glsl
index 7f21018..3f75f3b 100644
--- a/shaders/program/gbuffers_terrain.glsl
+++ b/shaders/program/gbuffers_terrain.glsl
@@ -43,7 +43,7 @@
 
 uniform sampler2D texture;
 
-#if defined NETHER || defined COATED_TEXTURES
+#if defined NETHER || defined COATED_TEXTURES || defined RANDOM_BLOCKLIGHT
 	uniform sampler2D noisetex;
 #endif
 
diff --git a/shaders/program/gbuffers_textured.glsl b/shaders/program/gbuffers_textured.glsl
index 8d3dd42..a909ac4 100644
--- a/shaders/program/gbuffers_textured.glsl
+++ b/shaders/program/gbuffers_textured.glsl
@@ -48,6 +48,10 @@
 	uniform sampler2D gaux3;
 #endif
 
+#ifdef RANDOM_BLOCKLIGHT
+	uniform sampler2D noisetex;
+#endif
+
 //Pipeline Constants//
 
 //Common Variables//
diff --git a/shaders/shaders.properties b/shaders/shaders.properties
index b2207ca..67bd193 100644
--- a/shaders/shaders.properties
+++ b/shaders/shaders.properties
@@ -1,22 +1,36 @@
 #Profiles
-    profile.LOW = SHADOW_QUALITY=2 shadowDistance=64.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=1 REFLECTION_QUALITY=2 LIGHTSHAFT_QUALITY=1 !GENERATED_NORMALS !COATED_TEXTURES SSAO
-    profile.MEDIUM = SHADOW_QUALITY=2 shadowDistance=128.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=2 LIGHTSHAFT_QUALITY=2 !GENERATED_NORMALS !COATED_TEXTURES SSAO
-    profile.HIGH = SHADOW_QUALITY=2 shadowDistance=192.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=3 !GENERATED_NORMALS !COATED_TEXTURES SSAO
-    profile.VERYHIGH = SHADOW_QUALITY=2 shadowDistance=224.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=3 GENERATED_NORMALS COATED_TEXTURES SSAO
-    profile.ULTRA = SHADOW_QUALITY=3 shadowDistance=256.0 ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=4 GENERATED_NORMALS COATED_TEXTURES SSAO
+    profile.LOW = SHADOW_QUALITY=2 shadowDistance=64.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=1 REFLECTION_QUALITY=2 LIGHTSHAFT_QUALITY=1 !GENERATED_NORMALS !COATED_TEXTURES SSAO AURORA_COLOR_PRESET=0 BLOCKY_AURORA SUN_ANGLE=0 !GLOWING_EMERALD_BLOCK !GLOWING_REDSTONE_BLOCK !GLOWING_LAPIS_BLOCK !GLOWING_WART !OVERWORLD_BEAMS STAR_BRIGHTNESS=1.0 GLOWING_AMETHYST_BLOCK=0
+    profile.MEDIUM = SHADOW_QUALITY=2 shadowDistance=128.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=2 LIGHTSHAFT_QUALITY=2 !GENERATED_NORMALS !COATED_TEXTURES SSAO AURORA_COLOR_PRESET=0 BLOCKY_AURORA SUN_ANGLE=0 !GLOWING_EMERALD_BLOCK !GLOWING_REDSTONE_BLOCK !GLOWING_LAPIS_BLOCK !GLOWING_WART !OVERWORLD_BEAMS STAR_BRIGHTNESS=1.0 GLOWING_AMETHYST_BLOCK=0
+    profile.HIGH = SHADOW_QUALITY=2 shadowDistance=192.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=3 !GENERATED_NORMALS !COATED_TEXTURES SSAO AURORA_COLOR_PRESET=0 BLOCKY_AURORA SUN_ANGLE=0 !GLOWING_EMERALD_BLOCK !GLOWING_REDSTONE_BLOCK !GLOWING_LAPIS_BLOCK !GLOWING_WART !OVERWORLD_BEAMS STAR_BRIGHTNESS=1.0 GLOWING_AMETHYST_BLOCK=0
+    profile.VERYHIGH = SHADOW_QUALITY=2 shadowDistance=224.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=3 GENERATED_NORMALS COATED_TEXTURES SSAO AURORA_COLOR_PRESET=0 BLOCKY_AURORA SUN_ANGLE=0 !GLOWING_EMERALD_BLOCK !GLOWING_REDSTONE_BLOCK !GLOWING_LAPIS_BLOCK !GLOWING_WART !OVERWORLD_BEAMS STAR_BRIGHTNESS=1.0 GLOWING_AMETHYST_BLOCK=0
+    profile.ULTRA = SHADOW_QUALITY=3 shadowDistance=256.0 ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=4 GENERATED_NORMALS COATED_TEXTURES SSAO AURORA_COLOR_PRESET=0 BLOCKY_AURORA SUN_ANGLE=0 !GLOWING_EMERALD_BLOCK !GLOWING_REDSTONE_BLOCK !GLOWING_LAPIS_BLOCK !GLOWING_WART !OVERWORLD_BEAMS STAR_BRIGHTNESS=1.0 GLOWING_AMETHYST_BLOCK=0
+    profile.OVERIMAGINED = SHADOW_QUALITY=2 shadowDistance=192.0 !ENTITY_SHADOWS CLOUD_QUALITY=3 WATER_QUALITY=2 REFLECTION_QUALITY=3 LIGHTSHAFT_QUALITY=3 !GENERATED_NORMALS !COATED_TEXTURES SSAO AURORA_COLOR_PRESET=1 !BLOCKY_AURORA SUN_ANGLE=-40 GLOWING_EMERALD_BLOCK GLOWING_REDSTONE_BLOCK GLOWING_LAPIS_BLOCK GLOWING_WART OVERWORLD_BEAMS STAR_BRIGHTNESS=2.0 GLOWING_AMETHYST_BLOCK=1
 
 #Screen Setup
-    screen=<empty> <empty> CMPR RP_MODE <empty> <empty> [PERFORMANCE_SETTINGS] [PREFERENCE_SETTINGS]
+    screen=<empty> <empty> <profile> RP_MODE <empty> <empty> [PERFORMANCE_SETTINGS] [PREFERENCE_SETTINGS] CMPR [OVERIMAGINED_SETTINGS]
     
-    screen.PERFORMANCE_SETTINGS=<empty> <empty> <profile> <empty> <empty> <empty> CLOUD_QUALITY WATER_QUALITY REFLECTION_QUALITY LIGHTSHAFT_QUALITY SHADOW_QUALITY shadowDistance ENTITY_SHADOWS SSAO GENERATED_NORMALS COATED_TEXTURES
+    screen.PERFORMANCE_SETTINGS=<empty> <empty> CLOUD_QUALITY WATER_QUALITY REFLECTION_QUALITY LIGHTSHAFT_QUALITY SHADOW_QUALITY shadowDistance ENTITY_SHADOWS SSAO GENERATED_NORMALS COATED_TEXTURES
 
     screen.PREFERENCE_SETTINGS=<empty> <empty> [SKY_SETTINGS] [CAMERA_SETTINGS] [IPBR_SETTINGS] WATER_STYLE BORDER_FOG PIXEL_SHADOW HELD_LIGHTING HAND_SWAYING LESS_LAVA_FOG SHOW_LIGHT_LEVEL MINIMUM_LIGHT_MODE WAVING_BLOCKS WORLD_OUTLINE
         screen.SKY_SETTINGS=<empty> <empty> AURORA_BOREALIS AURORA_CONDITION <empty> <empty> SUN_MOON_HORIZON NIGHT_STAR_AMOUNT <empty> <empty> [CLOUD_SETTINGS]
             screen.CLOUD_SETTINGS=<empty> <empty> CLOUD_SHADOWS SECOND_CLOUD_LAYER CLOUD_ALT1 CLOUD_ALT2
         screen.CAMERA_SETTINGS=<empty> <empty> BLOOM_STRENGTH FXAA <empty> <empty> T_EXPOSURE T_WHITE_CURVE T_LOWER_CURVE T_UPPER_CURVE T_SATURATION T_VIBRANCE
         screen.IPBR_SETTINGS=<empty> <empty> GLOWING_ORES FANCY_GLASS GENERATED_WATER_NORMALS
+        
+#Overimagined
+	screen.OVERIMAGINED_SETTINGS=<empty> <empty> [SKY] [WORLD] [MATERIALS] [WATER]
+        screen.SKY=<empty> <empty> [AURORA_SETTINGS] [CLOUDS] SUN_ANGLE STAR_BRIGHTNESS
+            screen.CLOUDS=<empty> <empty> CLOUD_WIDTH CLOUD_STRETCH CLOUD_SPEED CLOUD_TRANSPARENCY
+            screen.AURORA_SETTINGS=<empty> <empty> BLOCKY_AURORA [AURORA_COLOR_SETTINGS] <empty> <empty> AURORA_UP_I AURORA_SIZE AURORA_DOWN_I AURORA_DRAW_DISTANCE
+                screen.AURORA_COLOR_SETTINGS=<empty> <empty> AURORA_COLOR_PRESET RAINBOW_AURORA <empty> <empty> AURORA_UP_R AURORA_DOWN_R AURORA_UP_G AURORA_DOWN_G AURORA_UP_B AURORA_DOWN_B
+        screen.WORLD=<empty> <empty> WAVE_SPEED NIGHT_BRIGHTNESS OVERWORLD_BEAMS SCENE_AWARE_LIGHT_SHAFTS RANDOM_BLOCKLIGHT
+        screen.WATER=<empty> <empty> WAVE_INTENSITY UNDERWATER_DISTORTION_STRENGTH
+        screen.MATERIALS=<empty> <empty> [EMISSIVE_ORES] [IPBR_NORMALS] <empty> <empty> GLOWING_WART GLOWING_REDSTONE_BLOCK GLOWING_EMERALD_BLOCK GLOWING_LAPIS_BLOCK GLOWING_AMETHYST_BLOCK
+            screen.EMISSIVE_ORES=<empty> <empty> ORE_EMISSION <empty> <empty> <empty> GLOWING_DEBRIS GLOWING_IRON GLOWING_COPPER GLOWING_GOLD GLOWING_NETHER_GOLD GLOWING_DIAMOND GLOWING_EMERALD GLOWING_LAPIS GLOWING_QUARTZ GLOWING_GILDED_BLACKSTONE GLOWING_REDSTONE
+            screen.IPBR_NORMALS=<empty> <empty> NORMAL_RES NORMAL_THRESHOLD
+
 #Set Sliders
-    sliders=shadowDistance BLOOM_STRENGTH CLOUD_ALT1 CLOUD_ALT2 T_EXPOSURE T_WHITE_CURVE T_LOWER_CURVE T_UPPER_CURVE T_SATURATION T_VIBRANCE
+    sliders=shadowDistance BLOOM_STRENGTH CLOUD_ALT1 CLOUD_ALT2 T_EXPOSURE T_WHITE_CURVE T_LOWER_CURVE T_UPPER_CURVE T_SATURATION T_VIBRANCE AURORA_UP_R AURORA_DOWN_R AURORA_UP_G AURORA_DOWN_G AURORA_UP_B AURORA_DOWN_B AURORA_UP_I AURORA_DOWN_I AURORA_SIZE AURORA_DRAW_DISTANCE sunPathRotation SUN_ANGLE CLOUD_WIDTH CLOUD_STRETCH CLOUD_SPEED WAVE_SPEED NIGHT_BRIGHTNESS ORE_EMISSION STAR_BRIGHTNESS WAVE_INTENSITY UNDERWATER_DISTORTION_STRENGTH CLOUD_TRANSPARENCY NORMAL_RES NORMAL_THRESHOLD
 
 #Pipeline Settings
     clouds=off
@@ -81,4 +95,4 @@
     uniform.float.frameTimeSmooth = smooth(5, frameTime, 5, 5)
     uniform.float.eyeBrightnessM = smooth(4, eyeBrightness.y / 240.0, 5, 5)
     uniform.float.rainFactor = smooth(1, rainStrength, 15, 15)
-#
\ No newline at end of file
+#
